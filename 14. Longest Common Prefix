Steps:
>> Handle edge cases: If the input array is empty, return an empty string.
>> Sort the array: This helps in comparing the first and last strings which would have the least commonality.
>> Compare the first and last strings: Since sorting places the most different strings at the ends, comparing them gives the longest common prefix.


------------------------FUNCTION-CODE----------------------------

string longestCommonPrefix(vector<string> &strs)
{
  if(strs.empty()) return "";

  sort(strs.begin(), strs.end());

  string first = strs[0];
  string last = strs.back();

  int minLength = min(first.size(), last.size());

  int i = 0;
  while(i < minLength && first[i] == last[i])
  {
    ++i
  }

  return first.substr(0, i);
}
